{"version":3,"sources":["navigations/index.tsx","redux/reducers/Common.reducer.ts","redux/reducers/Index.reducer.ts","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","name","content","rel","href","className","commonState","Immutable","commonSettings","activeTheme","combineReducers","CommonReducer","state","actions","index","data","store","createStore","IndexReducer","applyMiddleware","thunk","React","useState","mode","setMode","theme","useMemo","toggleColorMode","prevMode","createTheme","palette","reducer","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StyledEngineProvider","injectFirst","document","getElementById"],"mappings":"uNAGe,SAASA,IACtB,OACE,eAAC,IAAD,WACE,sBAAMC,KAAK,cAAcC,QAAQ,kBACjC,sBACEC,IAAI,aACJC,KAAK,4DAEP,mCACE,qBAAKC,UAAU,oCAAf,SACE,qBAAKA,UAAU,sB,2DCHnBC,E,MAAcC,GAAU,CAQ1BC,eAAgB,CACZC,YAAa,iBChBNC,kBAAgB,CAC7BC,cDmBa,WAAqE,IAA9CC,EAA6C,uDAAhCN,EAAaO,EAAmB,uDAAJ,GAC3E,OAAO,2BACAD,GADP,kBAEKC,EAAQC,MAFb,2BAGWF,EAAMC,EAAQC,QACdD,EAAQE,W,QEfRC,EALDC,YACVC,EACAC,YAAgBC,MCiCLpB,EA/BH,WAAO,IAAD,EAEQqB,IAAMC,SAA2B,QAFzC,mBAETC,EAFS,KAEHC,EAFG,KAYVC,GATYJ,IAAMK,SACtB,iBAAO,CACLC,gBAAiB,WACfH,GAAQ,SAACI,GAAD,MAA4B,UAAbA,EAAuB,OAAS,eAG3D,IAGYP,IAAMK,SAClB,kBACEG,YAAY,CACVC,QAAS,CACPP,YAGN,CAACA,KAGH,OACE,cAAC,IAAD,CAAUP,MAAOe,EAAjB,SACE,cAACC,EAAA,EAAD,CAAeP,MAAOA,EAAtB,SACE,cAAC,EAAD,S,yBCvBOQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAsBC,aAAW,EAAjC,SACE,cAAC,EAAD,QAKJC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.b6f9b403.chunk.js","sourcesContent":["import { BrowserRouter } from \"react-router-dom\";\nimport SwapContainer from \"../containers/Swap/Swap.container\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <meta name=\"description\" content=\"Project Prism\" />\n      <link\n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      />\n      <>\n        <div className=\"container-fluid page-body-wrapper\">\n          <div className=\"main-panel\">\n            {/* <SwapContainer /> */}\n          </div>\n        </div>\n      </>\n    </BrowserRouter>\n  );\n}","import Immutable from 'seamless-immutable';\n/**\n * request form reducer action execute based on types\n * @param {initialState it cannot change} state \n * @param {default actions} action \n */\n\n/**\n * set initial state as immutable\n */\nconst commonState = Immutable({\n    // activeTheme: {\n    //     primaryColor: 'red',\n    //     accentColor: '#458622',\n    //     backgroundColor: '#FFC777',\n    //     textColor: '#504f4d',\n    //     secondaryColor: '#7F5315',\n    // }\n    commonSettings: {\n        activeTheme: 'LIGHT_THEME',\n    }\n});\n\nexport default function CommonReducer(state: any = commonState, actions: any = {}) {\n    return {\n        ...state,\n        [actions.index]: {\n            ...state[actions.index],\n            ...actions.data\n        }\n    }\n}\n\n\n\n\n","import CommonReducer from './Common.reducer';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  CommonReducer\n});\n\n","import {\n    applyMiddleware,\n    createStore\n} from 'redux';\n\nimport IndexReducer from './reducers/Index.reducer';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n    IndexReducer,\n    applyMiddleware(thunk)\n);\n\nexport default store;","import './App.css';\n\nimport { ThemeProvider, createTheme, useTheme } from '@mui/material/styles';\n\nimport Navigator from './navigations';\nimport { Provider } from 'react-redux';\nimport React from 'react';\n// import { ThemeProvider } from './theme/themeProvider';\nimport reducer from './redux/store'\n\nconst ColorModeContext = React.createContext({ toggleColorMode: () => { } });\n\nconst App = () => {\n\n  const [mode, setMode] = React.useState<'light' | 'dark'>('dark');\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode,\n        },\n      }),\n    [mode],\n  );\n\n  return (\n    <Provider store={reducer}>\n      <ThemeProvider theme={theme}>\n        <Navigator />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StyledEngineProvider injectFirst>\n      <App />\n    </StyledEngineProvider>\n  </React.StrictMode>\n  ,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}